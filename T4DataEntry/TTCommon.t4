<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#+
public List<Table> GetTables()
{
	var tables = new List<Table>();
		
	var files = Directory.GetFiles(Host.ResolvePath("DOM"));
	
	foreach (var file in files)
	{
		var fileInfo = new FileInfo(file);
		var tableName = fileInfo.Name.Replace(".txt", string.Empty);

		var table = new Table(tableName);

		List<string> metas = new List<string>(),
			columns = new List<string>();

		foreach (var line in File.ReadLines(file))
		{
			if (string.IsNullOrEmpty(line))
				continue;
			if (line.StartsWith("#"))
				metas.Add(line);
			else
				columns.Add(line);
		}
		
		foreach (var c in columns)
		{
			table.Columns.Add(new Column(tableName, c.Split(':')));
		}

		if (table.Columns.Count > 0)
		{
			tables.Add(table);
		}

		foreach (var meta in metas)
		{
			var values = meta.Split(':');

			switch (values[0].ToLower())
			{
				case "#order":
					table.Order = int.Parse(values[1]);
					break;
				case "#heights":
					var heights = values[1].Split(',').Select(int.Parse).ToArray();
					table.DataGridHeight = heights[0];
					table.InputElementsHeight = heights[1];
					break;
				default:
					throw new Exception("Unhandled table metadata tag: " + values[0]);
			}
		}
	}

	tables = tables
		.OrderBy(t => t.Order)
		.ToList();

	return tables;
}



public class Table
{
	public int Order;
	public int DataGridHeight, InputElementsHeight;
	public string Name;
	public List<Column> Columns;

	public string CleanName => T4DE.CleanName(this.Name);

	public bool IsCompositePK => this.Columns.Count(c => c.IsPrimaryKey) > 1;

	public Table(string name)
	{
		this.Name = name;
		this.Columns = new List<Column>();
		this.Order = int.MaxValue;
		this.DataGridHeight = 1;
		this.InputElementsHeight = 1;
	}

	public string CreateTableStatement()
	{
		var sb = new StringBuilder();
		sb.AppendFormat("create table if not exists \"{0}\"", this.Name);
		sb.Append(" (");

		foreach (var column in this.Columns)
			sb.Append(column.ColumnDefinition() + ", ");

		var pks = this.Columns
			.Where(c => c.IsPrimaryKey)
			.Select(c => c.Name);
		sb.AppendFormat("primary key ({0})", string.Join(", ", pks));

		sb.Append(")");
		return sb.ToString();
	}
}

public class Column
{
	public string Name;
	public string Type;
	private string Table;
	public string BaseType;

	public readonly bool IsPrimaryKey;
	public readonly bool IsNullable;
	public readonly bool IsDisplayable;

	// for strings, indicates whether the text can be the empty string. specified as "string!"
	public readonly bool CanBeEmptyString;
	
	public readonly string UIElementName;
	public readonly string UIElementType;
	
	public bool IsId {get => Name.EndsWith("Id"); }

	
	public string CleanName { get { return T4DE.CleanName(this.Name); } }

	public Column(string table, string[] configValues)
	{
		string name = configValues[0],
			type = configValues[1];

		this.Name = name.Replace("*", string.Empty);

		string[] extras = configValues.Length >= 3
			? configValues[2].Split(',').ToArray()
			: new string[0];

		this.IsNullable = type.EndsWith("?");

		switch (type)
		{
			case "string?":
				this.BaseType = this.Type = "string";
				this.CanBeEmptyString = true; // nullable strings can be the empty string
				break;
			case "string!":
				this.BaseType = this.Type = "string";
				this.CanBeEmptyString = false; // the "string!" type is declared as never being empty
				break;
			default:
				this.Type = type;
				this.BaseType = type.Replace("?", "");
				this.CanBeEmptyString = true; // currently not relevant
				break;
		}

		this.IsPrimaryKey  = this.Name == table + "Id"
			|| extras.Any(e => e == "PK");
		this.IsDisplayable = name.StartsWith("*");

		switch (this.Type)
		{
			case "int":
			case "int?":
			case "double":
			case "double?":
			case "Guid":
			case "Guid?":
			case "string":
				this.UIElementName = $"cb{table}_{this.Name}";
				this.UIElementType = "ComboBox";
				break;
			case "DateTime":
			case "DateTime?":
				this.UIElementName = $"dt{table}_{this.Name}";
				this.UIElementType = "DatePicker";
				break;
			case "bool":
			case "bool?":
				this.UIElementName = $"cb{table}_{this.Name}";
				this.UIElementType = "CheckBox";
				break;
			default:
				throw new Exception($"Unhandled type for {table} UIElementName: '{this.Type}'");
		}
	}

	public string ColumnDefinition()
	{
		var sb = new StringBuilder();
		sb.AppendFormat("\"{0}\" ", this.Name);

		switch (this.BaseType)
		{
			case "Guid":
				sb.Append("varchar(36)");
				break;
			case "DateTime":
				sb.Append("datetime");
				break;
			case "float":
			case "double":
				sb.Append("real");
				break;
			case "int":
			case "bool":
				sb.Append("integer");
				break;
			case "string":
				sb.Append("varchar");
				break;
			default:
				throw new Exception("Unhandled base type in Column.ColumnDefinition");
		}

		if (!this.IsNullable)
			sb.Append(" not null");

		return sb.ToString();
	}

}

public static class T4DE
{
	public static string CleanName(string input)
	{
		var sb = new StringBuilder();

		for (int i = 0; i < input.Length; i++)
		{
			if (i > 0 && char.IsUpper(input[i]))
				sb.Append(' ');
			sb.Append(input[i]);
		}

		return sb.ToString();
	}
}
#>