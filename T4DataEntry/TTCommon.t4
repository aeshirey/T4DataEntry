<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#+
public Dictionary<string, List<Column>> GetTables()
{
	var tables = new Dictionary<string, List<Column>>();
		
	var files = Directory.GetFiles(Host.ResolvePath("DOM"));
	foreach (var file in files)
	{
		var fileInfo = new FileInfo(file);
		var tableName = fileInfo.Name.Replace(".txt", string.Empty);
		tables[tableName] = new List<Column>();

		var columns = File.ReadLines(file)
			.Select(line => line.Split(':'));

		foreach (var c in columns)
		{
			//var col = new Column
			//{
			//	Name = c[0].Replace("*", string.Empty),
			//	Type = c[1],
			//	IsPrimaryKey = c[0] == tableName + "Id",
			//	IsDisplayable = c[0].StartsWith("*")
			//};
			//
			//tables[tableName].Add(col);
			tables[tableName].Add(new Column(tableName, c[0], c[1]));
		}

		if (tables[tableName].Count == 0)
		{
			tables.Remove(tableName);
		}
	}

	return tables;
}


public class Column
{
	public string Name;
	public string Type;
	private string Table;

	public readonly bool IsPrimaryKey;
	public readonly bool IsNullable;
	public readonly bool IsDisplayable;

	// for strings, indicates whether the text can be the empty string. specified as "string!"
	public readonly bool CanBeEmptyString;
	
	public readonly string UIElementName;
	public readonly string UIElementType;
	
	public bool IsId {get => Name.EndsWith("Id"); }

	public Column(string table, string name, string type)
	{
		this.Name = name.Replace("*", string.Empty);

		this.IsNullable = type.EndsWith("?");

		switch (type)
		{
			case "string?":
				this.Type = "string";
				this.CanBeEmptyString = true; // nullable strings can be the empty string
				break;
			case "string!":
				this.Type = "string";
				this.CanBeEmptyString = false; // the "string!" type is declared as never being empty
				break;
			default:
				this.Type = type;
				this.CanBeEmptyString = true; // currently not relevant
				break;
		}

		this.IsPrimaryKey  = name == table + "Id";
		this.IsDisplayable = name.StartsWith("*");

		switch (this.Type)
		{
			case "int":
			case "int?":
			case "Guid":
			case "Guid?":
			case "string":
				this.UIElementName = $"cb{table}_{this.Name}";
				this.UIElementType = "ComboBox";
				break;
			case "DateTime":
			case "DateTime?":
				this.UIElementName = $"dt{table}_{this.Name}";
				this.UIElementType = "DatePicker";
				break;
			case "bool":
			case "bool?":
				this.UIElementName = $"cb{table}_{this.Name}";
				this.UIElementType = "CheckBox";
				break;
			default:
				throw new Exception($"Unhandled type for {table} UIElementName: '{this.Type}'");
		}
	}
}
#>