<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="TTCommon.t4" #>
<#@ output extension=".xaml.cs" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using SQLite;

<# var tables = GetTables(); #>
namespace T4DataEntry
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
		public static UserDB UserDB;

        public MainWindow()
        {
            InitializeComponent();

			UserDB = new UserDB();

			// load all records
			<#
			
			PushIndent("            ");
			foreach(var table in tables)
			{
				WriteLine($"Load{table.Name}();");
			}
			PopIndent();


			foreach (var table in tables)
			{
				var cols = string.Join(", ", table.Columns.Select(c => $"{c.Name}:{c.Type}"));
				WriteLine($"// {table.Name}: {cols}");
			}


			#>

			// input element validation
			<#
			PushIndent("            ");
			foreach (var table in tables)
			{
				WriteLine($"// {table.Name}:");
				foreach (var column in table.Columns)
				{
					var btn = $"btn{table.Name}_Save";
					switch (column.Type)
					{
						case "int":
						case "int?":
						case "double":
						case "double?":
							WriteLine($"{column.UIElementName}.KeyUp += (sender, e) => {{ {btn}.IsEnabled = Is{table.Name}Valid(); }};");
							break;
						case "Guid":
						case "Guid?":
							WriteLine($"{column.UIElementName}.SelectionChanged += (sender, e) => {{ {btn}.IsEnabled = Is{table.Name}Valid(); }};");
							break;
						case "DateTime":
						case "DateTime?":
							WriteLine($"{column.UIElementName}.SelectedDateChanged += (sender, e) => {{ {btn}.IsEnabled = Is{table.Name}Valid(); }};");
							break;
						case "string":
							//if (!column.CanBeEmptyString)
							{
								WriteLine($"{column.UIElementName}.KeyUp += (sender, e) => {{ {btn}.IsEnabled = Is{table.Name}Valid(); }};");
							}
							break;
					}
				}

				WriteLine("");
			}
			PopIndent();
			#>
        }
		<#
		PushIndent("    ");
		#>
    
	
	#region Load data methods
	<#
	PushIndent("    ");
	foreach (var table in tables)
	{
		WriteLine($"private void Load{table.Name}()");
		WriteLine("{");
		PushIndent("    ");
		
		WriteLine($"// remove all {table.Name} entries from its DataGrid and pull the new set from the database");
		WriteLine($"dg{table.Name}.Items.Clear();");
		WriteLine($"var records = UserDB.Table<{table.Name}>().ToList();");
		WriteLine("");

		WriteLine("// add all records back into the DataGrid");
		WriteLine($"records.ForEach(r => dg{table.Name}.Items.Add(r));");


		foreach (var column in table.Columns)
		{
			if (column.IsPrimaryKey)
			{
				// any other tables that reference this id will have a ComboBox that needs to be updated
				foreach(var otherTable in tables)
				{
					// the other table can't be this one.
					if (otherTable.Name == table.Name) continue;

					foreach (var otherColumn in otherTable.Columns)
					{
						if (otherColumn.Name == table.Name + "Id")// column.Name)
						{
							// update the referenced table
							if (otherColumn.Type == "Guid?")
								WriteLine($"{otherColumn.UIElementName}.ItemsSource = (new {table.Name}[] {{ null }}).Concat(records);");
							else
								WriteLine($"{otherColumn.UIElementName}.ItemsSource = records;");
						}
					}
				}
			}
			else if (column.IsId)
			{
				// nothing -- id columns are taken care of by other table references
			}
			else
			{
				// populate editable fields within this tab
				switch (column.Type)
				{
					case "DateTime":
					case "DateTime?":
					case "bool":
					case "bool?":
						break;
					default:
						WriteLine($"{column.UIElementName}.ItemsSource = records.Select(r => r.{column.Name}).ToList();");
						break;
				}
			}
		}

		WriteLine($"btn{table.Name}_Save.IsEnabled = false;");
		
		PopIndent();
		WriteLine("}");
	}
	#>
#endregion



	
#region Events
// https://stackoverflow.com/questions/10667002/
private void DataGrid_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
{
	DataGrid grid = sender as DataGrid;
	if (grid == null) return;

	if (grid.SelectedItems != null && grid.SelectedItems.Count == 1)
	{
		DataGridRow dgr = grid.ItemContainerGenerator.ContainerFromItem(grid.SelectedItem) as DataGridRow;
		if (!dgr.IsMouseOver)
		{
			(dgr as DataGridRow).IsSelected = false;
		}
	}    
}

private void DataGrid_KeyUp(object sender, KeyEventArgs e)
{
	// currently, we're only handling delete events
    if (e.Key != Key.Delete)
		return;

	DataGrid grid = sender as DataGrid;
	if (grid == null) return;

	// can't delete if we don't have a selected item
	if (grid.SelectedItems == null || grid.SelectedItems.Count != 1)
		return;

    var response = MessageBox.Show("Are you sure you want to delete this record? This cannot be undone, and relationships are not deleted.", "Delete record?", MessageBoxButton.YesNo, MessageBoxImage.Warning, MessageBoxResult.No);
    if (response != MessageBoxResult.Yes)
		return;

	object item = grid.SelectedItem;

	// reload the appropriate table
<#
	bool isFirst = true;
	PushIndent("    ");
	foreach (var table in tables)
	{
		if (isFirst)
			isFirst = false;
		else
			Write("else ");

		WriteLine($"if (item is {table.Name})");
		WriteLine("{");
		WriteLine($"    UserDB.Delete(({table.Name})item);");
		WriteLine($"    Load{table.Name}();");
		WriteLine("}");
	}
	PopIndent();
	#>
}

#region Input validation events
<#
	foreach (var table in tables)
	{
		WriteLine($"private bool Is{table.Name}Valid()");
		WriteLine("{");
		PushIndent("    ");
		
		if (table.Columns.Any(c => !c.IsPrimaryKey && c.BaseType == "int")) WriteLine("int i;");
		if (table.Columns.Any(c => !c.IsPrimaryKey && c.BaseType == "double")) WriteLine("double d;");

		foreach (var column in table.Columns)
		{
			if (column.IsPrimaryKey && column.Name == table.Name + "Id") continue;
			var t = (column.IsNullable ? "Nullable" : string.Empty) + column.Type;
			switch (column.BaseType)
			{
				case "int":
				case "double":
					var letter = column.Type.ToLower()[0];
					if (column.IsNullable)
					{
						WriteLine($"if (!string.IsNullOrEmpty({column.UIElementName}.Text) && !{column.BaseType}.TryParse({column.UIElementName}.Text, out {letter})) return false;");
					}
					else
					{
						WriteLine($"if (!{column.Type}.TryParse({column.UIElementName}.Text, out {letter})) return false;");
					}
					break;
				case "Guid":
					if (!column.IsNullable)
					{
						WriteLine($"if ({column.UIElementName}.SelectedItem == null) return false;");
					}
					break;
				case "string":
					if (!column.CanBeEmptyString)
					{
						WriteLine($"if (string.IsNullOrEmpty({column.UIElementName}.Text)) return false;");
					}
					break;
			}
		}

		WriteLine("return true;");


		PopIndent();
		WriteLine("}");
		WriteLine("");
	}
	WriteLine("#endregion");
	WriteLine("");

	// enter handling
	WriteLine("#region Handle 'Enter' key for saving records");
	foreach (var table in tables)
	{
		WriteLine($"private void {table.Name}_KeyUp(object sender, KeyEventArgs e)");
		WriteLine("{");
		PushIndent("    ");

		WriteLine("if (e.Key != Key.Enter)");
		WriteLine("    return;");
		WriteLine("");

		WriteLine($"if (btn{table.Name}_Save.IsEnabled && Is{table.Name}Valid())");
		WriteLine($"    {table.Name}_Click(btn{table.Name}_Save, null);");

		PopIndent();
		WriteLine("}");
	}
	WriteLine("#endregion");
	#>


#region DataGrid selection changed
<#
foreach (var table in tables)
{
	WriteLine($"private void {table.Name}_SelectionChanged(object sender, SelectionChangedEventArgs e)");
	WriteLine("{");
	PushIndent("    ");

	WriteLine($"// get the {table.Name} object");
	WriteLine($"if (e.AddedItems.Count == 0)");
	WriteLine("{");
	PushIndent("    ");
	foreach(var column in table.Columns)
	{
		switch(column.Type)
		{
			case "string":
				WriteLine($"{column.UIElementName}.Text = default({column.Type});");
				break;
			case "int":
			case "int?":
			case "double":
			case "double?":
			case "Guid":
			case "Guid?":
				WriteLine($"{column.UIElementName}.Text = string.Empty;");
				break;
			case "DateTime":
				WriteLine($"{column.UIElementName}.SelectedDate = DateTime.Today;");
				break;
			case "DateTime?":
				WriteLine($"{column.UIElementName}.SelectedDate = null;");
				break;
			case "bool":
			case "bool?":
				WriteLine($"{column.UIElementName}.IsChecked = default({column.Type});");
				break;
			default:
				throw new Exception("Unhandled type in SelectionChanged (null): " + column.Type);
		}
	}
	PopIndent();
	WriteLine("}");
	WriteLine("else");
	WriteLine("{");

	PushIndent("    ");
	string instance = table.Name.ToLower();
	WriteLine($"{table.Name} {instance} = e.AddedItems[0] as {table.Name};");
	foreach(var column in table.Columns)
	{
		/*if (column.IsPrimaryKey)
		{
			Write($"{column.UIElementName}.Text = {instance}.{column.Name}");
			WriteLine(column.Type == "string" ? ";" : ".ToString();");
		}
		else */ if (column.IsId)
		{
			WriteLine($"foreach (var item in {column.UIElementName}.Items)");
			WriteLine("{");
			WriteLine($"   if ((item as {column.Name.Replace("Id", "")}).{column.Name} == {instance}.{column.Name})");
			WriteLine("   {");
			WriteLine($"      {column.UIElementName}.SelectedItem = item;");
			WriteLine("      break;");
			WriteLine("   }");
			//WriteLine($"   if (item == {column.UIElementName}.SelectedItem) continue;");
			WriteLine("}");
		}
		else
		{
			switch(column.Type)
			{
				case "string":
					WriteLine($"{column.UIElementName}.Text = {table.Name.ToLower()}.{column.Name};");
					break;
				case "int":
				case "int?":
				case "double":
				case "double?":
					WriteLine($"{column.UIElementName}.Text = {table.Name.ToLower()}.{column.Name}.ToString();");
					break;
				case "Guid":
				case "Guid?":
					WriteLine($"{column.UIElementName}.Text = {table.Name.ToLower()}.{column.Name}.ToString();");
					break;
				case "DateTime":
				case "DateTime?":
					WriteLine($"{column.UIElementName}.SelectedDate = {table.Name.ToLower()}.{column.Name};");
					break;
				case "bool":
				case "bool?":
					WriteLine($"{column.UIElementName}.IsChecked = {table.Name.ToLower()}.{column.Name};");
					break;
				default:
					throw new Exception("Unhandled type in SelectionChanged (value): " + column.Type);
			}
		}
	}
	PopIndent();
	WriteLine("}");

	PopIndent();
	WriteLine("}");
}
	#>
#endregion



#region Save button clicked (update/insert records)
<#
	foreach (var table in tables)
	{
		var tableName = table.Name;
		var columns = table.Columns;

		WriteLine($"private void {tableName}_Click(object sender, RoutedEventArgs e)");
		WriteLine("{");
		PushIndent("    ");
			
		if (columns.Any(c => c.Type == "int?" && !c.IsPrimaryKey))
			WriteLine("int i;");
		if (columns.Any(c => c.Type == "double?" && !c.IsPrimaryKey))
			WriteLine("double i;");
		if (columns.Any(c => c.Type == "Guid?" && !c.IsPrimaryKey))
			WriteLine("Guid g;");

		WriteLine($"{table.Name} selected = ({table.Name})dg{table.Name}.SelectedItem;");
		WriteLine($"// read each {tableName} column from its individual controls");
		foreach (var column in columns)
		{
			if (column.IsPrimaryKey)
			{

				Write($"{column.Type} _{column.Name} = selected?.{column.Name} ?? ");	
				switch (column.Type)
				{
					case "string":
						WriteLine($"{column.UIElementName}.Text;");
						break;
					case "int?":
					case "double?":
						WriteLine($"default({column.Type});");		
						break;
					case "Guid":
					case "Guid?":
						// if this guid is the PK for the current table (eg, Person.PersonId), generate an id
						if (column.Name == table.Name + "Id")
						{
							// generate a guid
							WriteLine("Guid.NewGuid();");
						}
						else
						{
							// refers to another table. there has to be a dropdown for it
							var otherTable = column.Name.Replace("Id", "");
							WriteLine($"({column.UIElementName}.SelectedItem as {otherTable}).{column.Name};");
						}
						break;
					case "int":
						WriteLine("int.Parse({column.UIElementName}.Text);");
						break;
					case "double":
						WriteLine("double.Parse({column.UIElementName}.Text);");
						break;
					default:
						break;
				}
			}
			else if (column.IsId)
			{
				// points to something else. get the object's id
				// for Guid? reference columns, there may be no selection and therefore no .SelectedItem.
				// in this case, use the null-coalescing operator ("?.") to qualify the dereference.
				// eg, "var _PersonId = (dbCar_PersonId.SelectedItem as Person)?.PersonId;"
				var coalesce = column.Type == "Guid?" ? "?" : "";
				WriteLine($"var _{column.Name} = ({column.UIElementName}.SelectedItem as {column.Name.Replace("Id", string.Empty)}){coalesce}.{column.Name};");
			}
			else
			{
				switch (column.Type)
				{
					case "bool?":
						WriteLine($"bool? _{column.Name} = {column.UIElementName}.IsChecked;");
						break;
					case "bool":
						WriteLine($"bool _{column.Name} = {column.UIElementName}.IsChecked ?? false;");
						break;
					case "DateTime?":
						WriteLine($"DateTime? _{column.Name} = {column.UIElementName}.SelectedDate;");
						break;
					case "DateTime":
						WriteLine($"DateTime _{column.Name} = {column.UIElementName}.SelectedDate ?? DateTime.MinValue;");
						break;
					case "int?":
						WriteLine($"int? _{column.Name} = int.TryParse({column.UIElementName}.Text, out i) ? i : (int?)null;");
						break;
					case "int":
						WriteLine($"int _{column.Name} = int.Parse({column.UIElementName}.Text);");
						break;
					case "double?":
						WriteLine($"double? _{column.Name} = double.TryParse({column.UIElementName}.Text, out i) ? i : (double?)null;");
						break;
					case "double":
						WriteLine($"double _{column.Name} = double.Parse({column.UIElementName}.Text);");
						break;
					case "Guid?":
						WriteLine($"Guid? _{column.Name} = Guid.TryParse({column.UIElementName}.Text, out g) ? g : (Guid?)null;");
						break;
					case "Guid":
						WriteLine($"Guid _{column.Name} = Guid.Parse({column.UIElementName}.Text);");
						break;
					case "string":
						WriteLine($"string _{column.Name} = {column.UIElementName}.Text;");
						break;
				}
			}
		}

		WriteLine("");
		WriteLine($"var record = new {tableName}");
		WriteLine("{");
		PushIndent("    ");

		foreach(var column in columns)
		{
			WriteLine($"{column.Name} = _{column.Name},");
		}

		PopIndent();
		WriteLine("};");
		WriteLine("");
		WriteLine("UserDB.InsertOrReplace(record);");
		WriteLine($"Load{table.Name}();");
		WriteLine("");
		WriteLine("if (!miRetainValues.IsChecked)");
		WriteLine("{");
		PushIndent("    ");
		WriteLine("// clear input elements");

		foreach (var column in table.Columns)
		{
			switch(column.Type)
			{
				case "string":
					WriteLine($"{column.UIElementName}.Text = default({column.Type});");
					break;
				case "int":
				case "int?":
				case "double":
				case "double?":
				case "Guid":
				case "Guid?":
					WriteLine($"{column.UIElementName}.Text = string.Empty;");
					break;
				case "DateTime":
					WriteLine($"{column.UIElementName}.SelectedDate = DateTime.Today;");
					break;
				case "DateTime?":
					WriteLine($"{column.UIElementName}.SelectedDate = null;");
					break;
				case "bool":
				case "bool?":
					WriteLine($"{column.UIElementName}.IsChecked = default({column.Type});");
					break;
			}
		}

		PopIndent();
		WriteLine("}");

		PopIndent();
		WriteLine("}");

		WriteLine("");
	}

	PopIndent();
	#>
	#endregion
	#endregion
}

#region Generated classes for the object model
<#
foreach (var table in tables)
{
	WriteLine($"public class {table.Name}");
	WriteLine("{");
		
	PushIndent("    ");
	foreach (var column in table.Columns)
	{
		if (column.IsPrimaryKey)
		{
			WriteLine("[PrimaryKey]");
		}

		WriteLine($"public {column.Type} {column.Name} {{ get; set; }}");

		if (column.IsId && column.Name != table.Name + "Id")
		{
			var rel = column.Name.Replace("Id", "");
			WriteLine($"public {rel} {rel} => MainWindow.UserDB.Table<{rel}>().First(rec => rec.{column.Name} == this.{column.Name});");
		}
	}

	// friendly name to display?
	if (table.Columns.Any(c => c.IsDisplayable))
	{
		if (table.ToStringMethod == "simple")
		{
			var x = string.Join(", ", table.Columns
				.Where(c => c.IsDisplayable)
				.Select(c => "{" + c.Name + "}"));
			WriteLine($"public override string ToString() => $\"{x}\";");
		}
		else
		{
			var x = string.Join(", ", table.Columns
				.Where(c => c.IsDisplayable)
				.Select(c => $"{c.Name}={{{c.Name}}}"));
			WriteLine($"public override string ToString() => $\"{table.Name}({x})\";");
		}
	}
	else if (table.Columns.Any(c => c.Name == "Name"))
	{
		WriteLine("public override string ToString() => Name;");
	}
	else if (table.Columns.Any(c => c.IsPrimaryKey))
	{
		var pk = table.Columns.First(c => c.IsPrimaryKey);
		var pkName = pk.Type == "string" ? pk.Name : pk.Name + ".ToString()";
		WriteLine($"public override string ToString() => {pkName};");
	}

	PopIndent();
	WriteLine("}");
	WriteLine("");
}
PopIndent();
PopIndent();
#>
	#endregion

	

	public class UserDB : SQLiteConnection
	{
		public const string DatabaseFile = @"data.sqlite";
		public static SQLiteConnection DbConnection;
		public UserDB(string databaseFile = DatabaseFile) : base(databaseFile)
		{
<#
		PushIndent("            ");
		foreach (var table in tables)
		{
			if (table.IsCompositePK)
			{
				var stmt = table.CreateTableStatement()
					.Replace("\"", "\\\"");
				WriteLine($"Execute(\"{stmt}\");");
			}
			else
				WriteLine($"CreateTable<{table.Name}>();");
		}
		PopIndent();
		#>
			Commit();
		}
	}
}
